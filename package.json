{
  "name": "mern-ecommerce",
  "version": "1.0.0",
  "description": "1.  Introductions\r 2.  Install Tools\r 3.  Create React App\r 4.  Create Git Repository\r 5.  React-router-dom\r 6.  Create Node.JS Server\r     1.  Run npm init in root folder\r     2.  Update package.json set type: module\r     3.  Add .js to import\r     4.  Npm install express\r     5.  Create server.js\r     6.  Add start command as node server/server.js\r     7.  Require express\r     8.  Create route for / return server is ready\r     9.  Move product.js from server is ready\r     10. Create route for /api/products\r     11. Return products\r     12. Run npm start\r 7.  Fetch Products From Backend\r     1.  Set proxy in package.json\r     2.  Npm install axios\r     3.  Use state hook\r     4.  Use Effect hook\r     5.  Use Reducer hook\r 8.  Manage State By Reducer Hook\r     1.  Define reducer\r     2.  Update fetch data\r     3.  Get State from useReducer\r 9.  Add bootstrap UI Framework\r     1. npm install react-bootstrap bootstrap\r     2. update App.js\r 10. Create product and rating component\r     1.  create rating component\r     2.  create product component\r     3.  use rating component in product component\r 11. Create Product Details Screen\r     1.  Fetch product from backend\r     2.  Create 3 columns for image, info and action.\r 12. Create Loading and Message Component\r     1.Create loading Component\r     2.Use Spinner Component\r     3.Create Message Component\r     4.Create utils.js to define getError function\r 13. Implement add to cart\r     1. Create React Context\r     2. Define reducer\r     3. Create store provider\r     4. Implement add to cart button click handler\r 14. Complete Add To Cart\r     1.Check exits item in the cart\r     2.Check count in stock in backend\r 15. Create Cart Screen\r     1. Create 2 columns\r     2. Display items list\r     3. Create action column\r 16. Complete Cart Screen\r     1. Click handler for inc/dec item\r     2. Click handler for remove item\r     3. Click handler for checkout\r 17. Create Sign in Screen\r     1. Create sign in from\r     2. Add email and password\r     3. Add sign in button\r 18. Connect to MongoDB Database\r     1. Create atlas mongodb database\r     2. install local mongodb database\r     3. npm install mongoose\r     4. connect to mongodb database\r        username: nguyenvanhai13\r        password: 061001\r 19. Seed Sample Data\r     1. Create Product Model\r     2. Create user model\r     3. create seed route\r     4. use route in server.js\r     5. seed sample product\r 20. Seed Sample Users(Su dung library: bcryptjs )\r     1. Create user model\r     2. Seed sample users\r     3. Create user routes\r 21. Create SignIn backend API\r     1. Create SignIn api\r     2. npm install jsonwebtoken\r     3. define generateToken\r 22. Complete SignIn Screen\r     1. Handle submit action\r     2. Save token in store and local storage\r     3. Show user name in header\r 23. Create Shipping Screen\r     1. Create from inputs\r     2. Handle save shipping address\r     3. Add checkout wizard bar\r 24. Create Sign Up Screen\r     1. Create input forms\r     2. Handle Submit\r     3. Create backend api\r 25. Implement select Payment method screen\r     1. create inform\r     2. handle submit\r 26. Create Place Order Screen\r     1. Show cart items , payment and address\r     2. Handle place order action\r     3. Create order create api\r 27. Implement place order action\r     1. handle place order action\r     2. create order create api\r 28. Create Order Screen\r     1. Create backend api for order/:id\r     2. Fetch order api in frontend\r     3. Show order information in 2 columns\r 29. Pay Order By PayPal\r     1. generate paypal client id\r     2. create api to return client id\r     3. install react-paypal-js\r     4. use PayPalScriptProvider in index.js\r     5. use usePayPalScriptReducer in Order Screen\r     6. implement loadPaypalScript function\r     7. render paypal button\r     8. implement onApprove payment function\r     9. create pay order api in backend\r 30. Display Order History\r     1. Create Order Screen\r     2. Create order history api\r     3. Use api in the frontend\r 31. Create Profile Screen\r     1. Get user info from context\r     2. Show user information\r     3. Create user update api\r     4. Update user info\r 32. Publish To Heroku\r     1. Create and config project\r     2. server build folder in frontend folder\r     3. create heroku account\r     4. Connect it to github\r     5. Create mongodb atlas database\r     6. Set database connection in heroku env variables\r     7. Commit and push",
  "main": "index.js",
  "scripts": {
    "build": "cd server && npm install  && cd ../client && npm install && npm run build",
    "start": "node server/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vanutcho123/mern-ECommerce.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/vanutcho123/mern-ECommerce/issues"
  },
  "homepage": "https://github.com/vanutcho123/mern-ECommerce#readme"
}
